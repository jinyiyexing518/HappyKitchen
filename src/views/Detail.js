import { React, useState, useEffect } from "react";
import axios from "axios";
import { Button, Spin, Checkbox, Divider, Affix, List, Card } from "antd";
import Title from "./Title";

export default function Detail(props) {
  // Return to the previous page
  const goback = () => {
    props.history.goBack();
  };

  const [list, setList] = useState([]);
  const [data, setData] = useState([]);

  // The detailed information of the dish
  const CheckboxGroup = Checkbox.Group;
  const plainOptions = ["简介", "食材", "做法", "注意事项"];
  const defaultCheckedList = ["简介"];
  const [checkedList, setCheckedList] = useState(defaultCheckedList);

  const checkAll = plainOptions.length === checkedList.length;
  const indeterminate =
    checkedList.length > 0 && checkedList.length < plainOptions.length;
  const onChange = (list) => {
    setCheckedList(list);
  };
  const onCheckAllChange = (e) => {
    setCheckedList(e.target.checked ? plainOptions : []);
  };

  // The detail information generated by Semantic Kernel
  const [detail, setDetail] = useState("");

  const getDetail = async (dishName) => {
    setDetail("");
    setGetDetailing(true);
    await axios({
      method: "Get",
      url: "http://localhost:5120/SemanticKernel/GetSemanticKernelResult/",
      params: {
        name: dishName,
      },
    })
      .then((res) => {
        console.log(res.data);
        setDetail(res.data);
      })
      .catch((err) => {
        console.log(err);
      });
      setGetDetailing(false);
  };

  // 实现收藏功能，将收藏的菜品信息存入数据库(local-storge)
  const favourite = () => {
    if(!detail || detail.length === 0){
      alert("收藏失败");
      return;
    }
    let favourite = {
      name: data[0].name,
      // poster: data[0].poster,
      // price: data[0].price,
      // productId: data[0].productId,
      introduction: detail.split("简介：")[1].split("食材：")[0].trim(),
      material: detail.split("食材：")[1].split("做法：")[0].trim(),
      method: detail.split("做法：")[1].split("注意事项：")[0].trim(),
      attention: detail.split("注意事项：")[1].trim()
    };
    let favouriteList = JSON.parse(sessionStorage.getItem("favourite")) || [];
    favouriteList.push(favourite);
    sessionStorage.setItem("favourite", JSON.stringify(favouriteList));
    console.log(favouriteList);
    setFavouriteStatus(true);
    alert("收藏成功");
  };

  const [favouriteStatus, setFavouriteStatus] = useState(false);

  const [getDetailing, setGetDetailing] = useState(false);

  //取消收藏
  const unfavourite = () => {
    let favouriteList = JSON.parse(sessionStorage.getItem("favourite")) || [];
    let newData = favouriteList.filter(
      (item) => item.productId !== props.match.params.myid
    );
    sessionStorage.setItem("favourite", JSON.stringify(newData));
    console.log(newData);
    setFavouriteStatus(false);
    alert("取消收藏成功");
  };

  useEffect(() => {
    axios.get("./test.json").then((res) => {
      // console.log(res.data.data.products);
      setList(res.data.data.products);

      let newData = list.filter(
        (item) => item.productId === props.match.params.myid
      );
      // console.log(newData);
      setData(newData);
    });
  }, [data, list, props.match.params.myid]);

  return (
    <div>
      {data.length === 0 ? (
        "None"
      ) : (
        <div>
          {/* Title */}
          <Affix offsetTop={10}>
            <div>
              <Title text={data[0].name} />
              <Button
                type="dashed"
                style={{ position: "fixed", top: "40px", right: "40px" }} onClick={() => {
                  {favouriteStatus? unfavourite(): favourite();}
                }}>
                {favouriteStatus ? "取消收藏" : "收藏"}
              </Button>
              <Button
                type="dashed"
                style={{ position: "fixed", top: "40px", left: "40px" }}
                onClick={() => {
                  goback();
                }}>
                返回
              </Button>
            </div>
          </Affix>

          <br />

          {/* Picture */}
          <div>
            <img
              src={data[0].poster}
              alt={data[0].name}
              style={{ height: "400px", width: "600px", marginLeft: "260px"}}
            />
          </div>

          {/* Use Semantic Kernel */}
          <div>
            <Button
              type="primary"
              style={{
                marginBottom: "15px",
                marginRight: "20px",
                marginTop: "20px",
              }}
              onClick={() => {
                getDetail(data[0].name);
              }}
            >
              Detail
            </Button>

            {/* Check box for display */}
            <Checkbox
              indeterminate={indeterminate}
              onChange={onCheckAllChange}
              checked={checkAll}
            >
              全选
            </Checkbox>
            <Divider style={{ marginTop: "0px", marginBottom: "10px" }} />
            <CheckboxGroup
              options={plainOptions}
              value={checkedList.length === 0 ? ["简介"] : checkedList}
              onChange={onChange}
            />

            {/* <div>
              <h3>简介：</h3>
              {detail ? (
                detail
                  .split("简介：")[1]
                  .split("食材：")[0]
                  .trim()
                  .split("\n")
                  .map((item, index) => {
                    return (
                      <p key={index}>
                        {"\u00A0\u00A0"}
                        {item}
                      </p>
                    );
                  })
              ) : (
                <Spin size="large">Click Detail Button and Wait</Spin>
              )}
            </div>
            {checkedList.includes("食材") ? (
              <div>
                <h3>食材：</h3>
                {detail ? (
                  detail
                    .split("食材：")[1]
                    .split("做法：")[0]
                    .trim()
                    .split("\n")
                    .map((item, index) => {
                      return (
                        <p key={index}>
                          {"\u00A0\u00A0"}
                          {item}
                        </p>
                      );
                    })
                ) : (
                  <Spin size="large">Click Detail Button and Wait</Spin>
                )}
              </div>
            ) : (
              <span></span>
            )}
            {checkedList.includes("做法") ? (
              <div>
                <h3>做法：</h3>
                {detail ? (
                  detail
                    .split("做法：")[1]
                    .split("注意事项：")[0]
                    .trim()
                    .split("\n")
                    .map((item, index) => {
                      return (
                        <p key={index}>
                          {"\u00A0\u00A0"}
                          {item}
                        </p>
                      );
                    })
                ) : (
                  <Spin size="large">Click Detail Button and Wait</Spin>
                )}
              </div>
            ) : (
              <span></span>
            )}
            {checkedList.includes("注意事项") ? (
              <div>
                <h3>注意事项：</h3>
                {detail ? (
                  detail
                    .split("注意事项：")[1]
                    .trim()
                    .split("\n")
                    .map((item, index) => {
                      return (
                        <p key={index}>
                          {"\u00A0\u00A0"}
                          {item}
                        </p>
                      );
                    })
                ) : (
                  <Spin size="large">Click Detail Button and Wait</Spin>
                )}
              </div>
            ) : (
              <span></span>
            )} */}

            {/* 使用List展示详细信息 */}
            <List grid={{ gutter: 16, xs: 1, sm: 1, md: 1, lg: 1, xl: 1, xxl: 1, }}>
                <List.Item>
                  <Card title="简介：">
                    {detail ? (detail
                    .split("简介：")[1]
                    .split("食材：")[0]
                    .trim()
                    .split("\n")
                    .map((item, index) => {
                      return (
                        <p key={index}>
                          {"\u00A0\u00A0"}
                          {item}
                        </p>
                      );
                    })
                  ) : (
                    getDetailing && <Spin size="large">Click Detail Button and Wait</Spin>
                  )}
                </Card>
                {checkedList.includes("食材") ? <Card title="食材：">
                    {detail ? (detail
                    .split("食材：")[1]
                    .split("做法：")[0]
                    .trim()
                    .split("\n")
                    .map((item, index) => {
                      return (
                        <p key={index}>
                          {"\u00A0\u00A0"}
                          {item}
                        </p>
                      );
                    })
                  ) : (
                    getDetailing && <Spin size="large">Click Detail Button and Wait</Spin>
                  )}
                </Card>: <span></span>}

                {checkedList.includes("做法") ? <Card title="做法：">
                    {detail ? (detail
                    .split("做法：")[1]
                    .split("注意事项：")[0]
                    .trim()
                    .split("\n")
                    .map((item, index) => {
                      return (
                        <p key={index}>
                          {"\u00A0\u00A0"}
                          {item}
                        </p>
                      );
                    })
                  ) : (
                    getDetailing && <Spin size="large">Click Detail Button and Wait</Spin>
                  )}
                </Card>: <span></span>}

                {checkedList.includes("注意事项") ? <Card title="注意事项：">
                {detail ? (
                  detail
                    .split("注意事项：")[1]
                    .trim()
                    .split("\n")
                    .map((item, index) => {
                      return (
                        <p key={index}>
                          {"\u00A0\u00A0"}
                          {item}
                        </p>
                      );
                    })
                ) : (
                  getDetailing && <Spin size="large">Click Detail Button and Wait</Spin>
                )}
                </Card>: <span></span>}
                </List.Item>
            </List>

          </div>
        </div>
      )}
      <br />
      <br />
    </div>
  );
}
